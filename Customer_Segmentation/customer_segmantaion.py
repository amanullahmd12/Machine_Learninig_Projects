# -*- coding: utf-8 -*-
"""Customer Segmentation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PYj3gRqyViIPWdlFtJr7PaJ_4bhh9_GW
"""

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('Mall_Customers.csv')

data.head()

"""head() method of padas frame is use to display top 5 rows of data set"""

data.tail()

"""tail() method of pandas frame is used to display bottom 5 rows of dataset."""

data.shape

"""Here Shape is an attribute of pandas frame we use it here to know no.rows and column of dataset"""

data.info()

"""info method we use here to know about the complete information of dataset"""

data.isnull().sum()

"""Here isnull method is used for know the null value in dataset. and by adding sum() method we display the complete status of values"""

data.describe()

"""Here desribe method of pandas frame helps us to know about the complete statistics of the dataset."""

data.columns

x = data[['Annual Income (k$)','Spending Score (1-100)']]

"""Here we are assigning Annual Income (k$),Spending Score (1-100) value of dataset in x to use it for our segmentation.and it will be helpful for visualising the clusturing"""

x

from sklearn.cluster import KMeans

"""We are importing KMeans Clusturing Algorithm."""

k_means = KMeans()
k_means.fit(x)

"""Instanciating KMeans Algorithm.
And training KMeans Algorithm for the dataset.
"""

k_means = KMeans()
k_means.fit_predict(x)

"""
**k_means.fit_predict(x) ** we use it to identify no. of clusters by creating dependent variable."""







wcss=[]
for i in range(1,11):
  k_means = KMeans(n_clusters=i)
  k_means.fit(x)
  wcss.append(k_means.inertia_)

wcss

"""WCSS STNADS FOR WITH IN CLUSTER SUM OF SQUARES"""

import matplotlib.pyplot as plt

"""For visulaizing we are importing matplotlib.pyplot """

plt.plot(range(1,11),wcss)
plt.title("Elbow Method")
plt.xlabel("Number oF Clusters")
plt.ylabel("WCSS")
plt.show()

"""x axis represrents the no. of clusters
y axis represents the wcss
Rest of are use to desing the plot
"""





x = data[['Annual Income (k$)','Spending Score (1-100)']]

x

k_means = KMeans(n_clusters=5,random_state=42)
y_means = k_means.fit_predict(x)

y_means

plt.scatter(x.iloc[y_means==0,0],x.iloc[y_means==0,1], s= 100 ,c='red',label = "Column 1")
plt.scatter(x.iloc[y_means==1,0],x.iloc[y_means==1,1], s= 100 ,c='blue',label = "Column 2")
plt.scatter(x.iloc[y_means==2,0],x.iloc[y_means==2,1], s= 100 ,c='yellow',label = "Column 3")
plt.scatter(x.iloc[y_means==3,0],x.iloc[y_means==3,1], s= 100 ,c='green',label = "Column 4")
plt.scatter(x.iloc[y_means==4,0],x.iloc[y_means==4,1], s= 100 ,c='black',label = "Column 5")
plt.scatter(k_means.cluster_centers_[:,0],k_means.cluster_centers_[:,1],s=100,c="magenta")
plt.title("Customer Segmentation")
plt.xlabel("Annual Income")
plt.ylabel("Spending Score")
plt.legend()
plt.show()

k_means.predict([[15,39]])



import joblib

joblib.dump(k_means,"Customer-Segmentaion")

model = joblib.load("Customer-Segmentaion")

model.predict([[15,39]])

plt.scatter(x.iloc[y_means==0,0],x.iloc[y_means==0,1], s= 100 ,c='red',label = "Column 1")
plt.scatter(x.iloc[y_means==1,0],x.iloc[y_means==1,1], s= 100 ,c='blue',label = "Column 2")
plt.scatter(x.iloc[y_means==2,0],x.iloc[y_means==2,1], s= 100 ,c='yellow',label = "Column 3")
plt.scatter(x.iloc[y_means==3,0],x.iloc[y_means==3,1], s= 100 ,c='green',label = "Column 4")
plt.scatter(x.iloc[y_means==4,0],x.iloc[y_means==4,1], s= 100 ,c='black',label = "Column 5")
plt.scatter(k_means.cluster_centers_[:,0],k_means.cluster_centers_[:,1],s=100,c="magenta")
plt.title("Customer Segmentation")
plt.xlabel("Annual Income")
plt.ylabel("Spending Score")
plt.legend()
plt.show()

model = joblib.load("Customer-Segmentaion")

model.predict([[15,39]])
